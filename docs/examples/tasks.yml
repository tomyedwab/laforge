# Task Specification YAML Format
# This format matches the Task model in tasks/tasks.go

# Basic task structure
tasks:
  - id: 1
    title: "Implement user authentication system"
    description: "Create a complete authentication system with login, logout, and registration"
    acceptance_criteria: |
      - Users can register with email and password
      - Users can login with valid credentials
      - Users can logout
      - Password reset functionality works
      - Session management is secure
    upstream_dependency_id: null
    review_required: true
    parent_id: null
    status: "todo"

  - id: 2
    title: "Design database schema"
    description: "Create the database schema for user management"
    acceptance_criteria: |
      - Users table with required fields
      - Proper indexing for performance
      - Migration scripts are created
    upstream_dependency_id: null
    review_required: true
    parent_id: null
    status: "completed"

  - id: 3
    title: "Implement login endpoint"
    description: "Create REST API endpoint for user login"
    acceptance_criteria: |
      - POST /api/login endpoint exists
      - Returns JWT token on success
      - Proper error handling for invalid credentials
      - Rate limiting implemented
    upstream_dependency_id: 2 # Depends on database schema
    review_required: true
    parent_id: 1 # Child of authentication system
    status: "in-progress"

  - id: 4
    title: "Implement registration endpoint"
    description: "Create REST API endpoint for user registration"
    acceptance_criteria: |
      - POST /api/register endpoint exists
      - Email validation implemented
      - Password strength requirements enforced
      - Duplicate email prevention
    upstream_dependency_id: 2 # Depends on database schema
    review_required: true
    parent_id: 1 # Child of authentication system
    status: "todo"

  - id: 5
    title: "Create login UI component"
    description: "Build the frontend login form component"
    acceptance_criteria: |
      - Responsive design that works on mobile and desktop
      - Form validation with clear error messages
      - Loading states during API calls
      - Accessible with proper ARIA labels
    upstream_dependency_id: 3 # Depends on login endpoint
    review_required: false
    parent_id: 1 # Child of authentication system
    status: "todo"

  - id: 6
    title: "Create registration UI component"
    description: "Build the frontend registration form component"
    acceptance_criteria: |
      - Responsive design that works on mobile and desktop
      - Form validation with clear error messages
      - Password strength indicator
      - Terms of service checkbox
    upstream_dependency_id: 4 # Depends on registration endpoint
    review_required: false
    parent_id: 1 # Child of authentication system
    status: "todo"

  - id: 7
    title: "Implement password reset functionality"
    description: "Create password reset flow with email verification"
    acceptance_criteria: |
      - Password reset request endpoint
      - Email with reset link sent
      - Password reset confirmation endpoint
      - Reset links expire after 1 hour
    upstream_dependency_id: 2 # Depends on database schema
    review_required: true
    parent_id: 1 # Child of authentication system
    status: "todo"

  - id: 8
    title: "Add unit tests for authentication"
    description: "Write comprehensive unit tests for all authentication components"
    acceptance_criteria: |
      - 90% code coverage for authentication modules
      - Tests for all edge cases
      - Mock external dependencies
      - Integration tests for API endpoints
    upstream_dependency_id: null # Can be started independently
    review_required: true
    parent_id: 1 # Child of authentication system
    status: "todo"

  - id: 9
    title: "Security audit and penetration testing"
    description: "Perform security testing on authentication system"
    acceptance_criteria: |
      - No SQL injection vulnerabilities
      - No XSS vulnerabilities
      - Proper input sanitization
      - Security headers implemented
      - Penetration test report completed
    upstream_dependency_id: 1 # Depends on complete authentication system
    review_required: true
    parent_id: null
    status: "todo"

  - id: 10
    title: "Documentation and deployment guide"
    description: "Create comprehensive documentation for the authentication system"
    acceptance_criteria: |
      - API documentation with examples
      - Deployment guide for production
      - Environment configuration guide
      - Troubleshooting documentation
    upstream_dependency_id: 1 # Depends on complete authentication system
    review_required: false
    parent_id: null
    status: "todo"

  # Example of a complex project with nested tasks
  - id: 101
    title: "[EPIC] E-commerce Platform"
    description: "Complete e-commerce platform with shopping cart, payments, and inventory"
    acceptance_criteria: |
      - Full shopping cart functionality
      - Secure payment processing
      - Inventory management
      - Order tracking system
    upstream_dependency_id: null
    review_required: true
    parent_id: null
    status: "in-progress"

  - id: 102
    title: "[FEAT] Product Catalog System"
    description: "Product management and catalog display"
    acceptance_criteria: |
      - Product CRUD operations
      - Product categories and filtering
      - Product images and galleries
      - Search functionality
    upstream_dependency_id: null
    review_required: true
    parent_id: 101
    status: "todo"

  - id: 103
    title: "[FEAT] Shopping Cart Implementation"
    description: "Shopping cart with session management"
    acceptance_criteria: |
      - Add/remove items from cart
      - Cart persistence across sessions
      - Quantity management
      - Cart total calculations
    upstream_dependency_id: 102 # Depends on product catalog
    review_required: true
    parent_id: 101
    status: "todo"

  - id: 104
    title: "[FEAT] Payment Integration"
    description: "Integrate with payment gateway"
    acceptance_criteria: |
      - Stripe/PayPal integration
      - Secure payment processing
      - Payment confirmation emails
      - Refund handling
    upstream_dependency_id: 103 # Depends on shopping cart
    review_required: true
    parent_id: 101
    status: "todo"

  - id: 105
    title: "[BUG] Fix mobile responsive issues"
    description: "Resolve layout problems on mobile devices"
    acceptance_criteria: |
      - All pages work on screens 320px+
      - Touch-friendly interface
      - No horizontal scrolling
      - Proper font sizing
    upstream_dependency_id: null
    review_required: false
    parent_id: 101
    status: "in-review"

  # Example of tasks with different statuses and dependencies
  - id: 201
    title: "[PLAN] Architecture Design Phase"
    description: "Plan and design the system architecture"
    acceptance_criteria: |
      - System architecture diagram
      - Technology stack selection
      - Database schema design
      - API specification
    upstream_dependency_id: null
    review_required: true
    parent_id: null
    status: "completed"

  - id: 202
    title: "[ARCH] Microservices Architecture"
    description: "Design microservices architecture pattern"
    acceptance_criteria: |
      - Service boundaries defined
      - Communication protocols chosen
      - Data consistency strategy
      - Deployment architecture
    upstream_dependency_id: 201
    review_required: true
    parent_id: null
    status: "in-review"

  - id: 203
    title: "[DESIGN] UI/UX Mockups"
    description: "Create user interface mockups and wireframes"
    acceptance_criteria: |
      - High-fidelity mockups for all pages
      - User flow diagrams
      - Responsive design mockups
      - Accessibility compliance
    upstream_dependency_id: 201
    review_required: true
    parent_id: null
    status: "in-progress"

  - id: 204
    title: "[FEAT] User Service Implementation"
    description: "Implement the user management microservice"
    acceptance_criteria: |
      - User registration and login
      - Profile management
      - Role-based access control
      - User preferences
    upstream_dependency_id: 202 # Depends on architecture
    review_required: true
    parent_id: null
    status: "todo"

  - id: 205
    title: "[FEAT] Frontend Application"
    description: "Build the frontend React application"
    acceptance_criteria: |
      - Single Page Application
      - Responsive design implementation
      - State management with Redux
      - Unit and integration tests
    upstream_dependency_id: 203 # Depends on UI design
    review_required: true
    parent_id: null
    status: "todo"

# Example showing task logs and reviews (these would be separate YAML sections)
task_logs:
  - task_id: 202
    message: "Started architecture design review with team"

  - task_id: 202
    message: "Updated service boundaries based on feedback"

  - task_id: 203
    message: "Completed initial wireframes for dashboard"

task_reviews:
  - task_id: 202
    message: "Architecture design needs clarification on data consistency"
    attachment: "docs/artifacts/architecture-review.md"
    status: "pending"
    feedback: null

# YAML Schema Definition
schema:
  task:
    required_fields:
      - title
      - status
    optional_fields:
      - id
      - description
      - acceptance_criteria
      - upstream_dependency_id
      - review_required
      - parent_id
    status_values:
      - "todo"
      - "in-progress"
      - "in-review"
      - "completed"
    field_types:
      id: integer
      title: string
      description: string
      acceptance_criteria: string
      upstream_dependency_id: integer or null
      review_required: boolean
      parent_id: integer or null
      status: string (must be one of status_values)
# Usage Notes:
# - Tasks can be organized in any order, IDs are used for references
# - Upstream dependencies must be completed before dependent tasks can start
# - Parent-child relationships create task hierarchies
# - Review required tasks need approval before completion
# - Status transitions follow business rules (e.g., can't complete with incomplete children)
